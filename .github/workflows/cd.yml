name: Continuous Delivery

on:
  push:
    branches:
      - main
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io

jobs:
  backend:
    name: Build backend
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/nikogrid/backend
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: "{{defaultContext}}:backend"
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  frontend:
    name: Build frontend
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/nikogrid/frontend
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: "{{defaultContext}}:frontend"
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  e2e:
    if: github.ref == 'refs/heads/main'
    name: Run integration tests
    needs: [backend, frontend]
    runs-on: deti-tqs-24
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.9

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('backend/**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install argocd
        run: |
          curl -sSL -o argocd-linux-amd64 "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Deploy and wait
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
          ARGOCD_STAGING_APP_NAME: ${{ secrets.ARGOCD_STAGING_APP_NAME }}
        run: |
          argocd login "${ARGOCD_SERVER}" --insecure --username "${ARGOCD_USERNAME}" --password "${ARGOCD_PASSWORD}"
          argocd app sync "${ARGOCD_STAGING_APP_NAME}" || true
          argocd app actions run "${ARGOCD_STAGING_APP_NAME}" restart --kind Deployment --all || true
          argocd app wait "${ARGOCD_STAGING_APP_NAME}" || true

      - name: Run tests
        env:
          STAGING_DB_URL: ${{ secrets.STAGING_DB_URL }}
        run: |
          cd ./backend

          cat <<EOF > src/test/resources/application-test.properties
          frontend.base-url=https://staging.nikogrid.jcapucho.com/
          spring.datasource.url=$STAGING_DB_URL
          spring.flyway.enabled=false
          testcontainers.enabled=false
          selenium.docker=true
          EOF

          mvn -B test -Dtest=com.nikogrid.backend.TestCucumberRunner

      - name: Import results to Xray
        if: always()
        uses: mikepenz/xray-action@v3
        with:
          username: ${{ secrets.XRAY_CLIENT_ID }}
          password: ${{ secrets.XRAY_CLIENT_SECRET }}
          testFormat: "cucumber"
          testPaths: "backend/target/report.json"
          projectKey: "NIK"

      - name: Load test data
        env:
          PSQL_STAGING_DB_URL: ${{ secrets.PSQL_STAGING_DB_URL }}
        run: |
          sudo apt update
          sudo apt install -y postgresql-client
          psql -d "$PSQL_STAGING_DB_URL" -a -f infra/load-data.sql

      - name: Install k6
        uses: grafana/setup-k6-action@v1

      - name: Run performance tests
        env:
          BASE_URL: https://staging.nikogrid.jcapucho.com/
        run: |
          K6_PROMETHEUS_RW_SERVER_URL=http://monitoring-stack-kube-prom-prometheus.monitoring:9090/api/v1/write k6 run -o experimental-prometheus-rw performance-testing/locations_test.js
