/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as StationStationIdIndexImport } from './routes/station/$stationId/index'

// Create Virtual Routes

const AuthRegisterIndexLazyImport = createFileRoute('/_auth/register/')()
const AuthLoginIndexLazyImport = createFileRoute('/_auth/login/')()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterIndexLazyRoute = AuthRegisterIndexLazyImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/register/index.lazy').then((d) => d.Route),
)

const AuthLoginIndexLazyRoute = AuthLoginIndexLazyImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/login/index.lazy').then((d) => d.Route),
)

const StationStationIdIndexRoute = StationStationIdIndexImport.update({
  id: '/station/$stationId/',
  path: '/station/$stationId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/station/$stationId/': {
      id: '/station/$stationId/'
      path: '/station/$stationId'
      fullPath: '/station/$stationId'
      preLoaderRoute: typeof StationStationIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login/': {
      id: '/_auth/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/register/': {
      id: '/_auth/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterIndexLazyImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginIndexLazyRoute: typeof AuthLoginIndexLazyRoute
  AuthRegisterIndexLazyRoute: typeof AuthRegisterIndexLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginIndexLazyRoute: AuthLoginIndexLazyRoute,
  AuthRegisterIndexLazyRoute: AuthRegisterIndexLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/station/$stationId': typeof StationStationIdIndexRoute
  '/login': typeof AuthLoginIndexLazyRoute
  '/register': typeof AuthRegisterIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/station/$stationId': typeof StationStationIdIndexRoute
  '/login': typeof AuthLoginIndexLazyRoute
  '/register': typeof AuthRegisterIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/station/$stationId/': typeof StationStationIdIndexRoute
  '/_auth/login/': typeof AuthLoginIndexLazyRoute
  '/_auth/register/': typeof AuthRegisterIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/station/$stationId' | '/login' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/station/$stationId' | '/login' | '/register'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/station/$stationId/'
    | '/_auth/login/'
    | '/_auth/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  StationStationIdIndexRoute: typeof StationStationIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  StationStationIdIndexRoute: StationStationIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/station/$stationId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login/",
        "/_auth/register/"
      ]
    },
    "/station/$stationId/": {
      "filePath": "station/$stationId/index.tsx"
    },
    "/_auth/login/": {
      "filePath": "_auth/login/index.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/register/": {
      "filePath": "_auth/register/index.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
