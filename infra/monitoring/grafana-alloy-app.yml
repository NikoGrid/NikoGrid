apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: grafana-alloy-app
  namespace: argocd
spec:
  destination:
    namespace: monitoring
    server: https://kubernetes.default.svc
  project: default
  source:
    repoURL: https://grafana.github.io/helm-charts
    chart: alloy
    targetRevision: "1.1.1"
    helm:
      valuesObject:
        alloy:
          configMap:
            content: |
              loki.write "default" {
                endpoint {
                  url = "http://loki-app.monitoring:3100/loki/api/v1/push"
                  tenant_id = "1"
                }
              }

              discovery.kubernetes "pod" {
                role = "pod"
              }

              discovery.relabel "pod_logs" {
                targets = discovery.kubernetes.pod.targets

                // Label creation - "namespace" field from "__meta_kubernetes_namespace"
                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  action = "replace"
                  target_label = "namespace"
                }

                // Label creation - "pod" field from "__meta_kubernetes_pod_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  action = "replace"
                  target_label = "pod"
                }

                // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "container"
                }

                // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
                rule {
                  source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                  action = "replace"
                  target_label = "app"
                }

                // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
                rule {
                  source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "job"
                  separator = "/"
                  replacement = "$1"
                }

                // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
                // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
                rule {
                  source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "__path__"
                  separator = "/"
                  replacement = "/var/log/pods/*$1/*.log"
                }

                // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_id"]
                  action = "replace"
                  target_label = "container_runtime"
                  regex = "^(\\S+):\\/\\/.+$"
                  replacement = "$1"
                }
              }

              // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
              loki.source.kubernetes "pod_logs" {
                targets    = discovery.relabel.pod_logs.output
                forward_to = [loki.process.pod_logs.receiver]
              }

              // loki.process receives log entries from other Loki components, applies one or more processing stages,
              // and forwards the results to the list of receivers in the component's arguments.
              loki.process "pod_logs" {
                forward_to = [loki.write.default.receiver]
              }
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
